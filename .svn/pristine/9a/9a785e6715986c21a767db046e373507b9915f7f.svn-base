<?php 
class CVFromCvar extends FPDF
{
	protected $nombre_archivo;
	protected $alto_linea;
	protected $ancho_etiqueta;
	protected $ancho_hoja;
	protected $fuente_familia;
	protected $fuente_tamanio;
	protected $borde;
	protected $datos_personales;
	protected $datos_experticia;
	protected $formacion;
	protected $cargos;
	protected $antecedentes;
	protected $produccion;
	protected $sangria;

	function __construct($datos)
	{
		$datos = toba::consulta_php('helper')->utf8_decode_recursive_array($datos);
		//ei_arbol($datos);
		$this->alto_linea       = 5;
		$this->ancho_etiqueta   = 50;
		$this->ancho_hoja       = 190;
		$this->fuente_familia   = 'Times';
		$this->fuente_tamanio   = 11;
		$this->borde            = false;
		$this->datos_personales = $datos['datosPersonales'];
		$this->datos_experticia = $datos['datosExperticia'];
		$this->formacion        = $datos['formacion'];
		$this->cargos           = $datos['cargos'];
		$this->antecedentes     = $datos['antecedentes'];
		$this->produccion       = $datos['produccion'];
		$this->sangria          = 0; 

		//var_dump($this->datos_personales);die;
		parent::__construct();
		
		//Formato A4 y Apaisado
		$this->AddPage('Portrait','A4');

		$this->setFont('Times', 'BU', 14);
		$this->setXY(10,10); 
		$ayn = sprintf('%s, %s', $this->datos_personales['identificacion']['apellido'], $this->datos_personales['identificacion']['nombre']);  
		$this->Cell($this->ancho_hoja,$this->alto_linea*2, $ayn, 1, 1, 'C', false);


		$this->datos_personales();
		$this->datos_domicilio();
		$this->datos_experticia();
		$this->datos_formacion();
	}

	protected function datos_personales()
	{
		$this->titulo_seccion('Datos personales');
		//Apellido y Nombres
		$ayn = sprintf('%s, %s', $this->datos_personales['identificacion']['apellido'], $this->datos_personales['identificacion']['nombre']);  
		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Apellido y nombre:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(),$this->alto_linea, $ayn, $this->borde, 1, 'L', false);
		
		//Número de Documento
		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Nro. Documento:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['identificacion']['tipoDocumento'] . ' ' . $this->datos_personales['identificacion']['numeroDocumento'], $this->borde, 1, 'L', false);

		//CUIL
		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'CUIL:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['identificacion']['cuil'], $this->borde, 1, 'L', false);

		//Fecha de Nacimiento
		$fec_nac = $this->getFecha($this->datos_personales['identificacion']['fechaNacimiento'], 'd/m/y');

		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Fecha Nacimiento:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(), $this->alto_linea, $fec_nac, $this->borde, 1, 'L', false);

		//Estado Civil
		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Estado Civil:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['identificacion']['estadoCivil'], $this->borde, 1, 'L', false);

		//Nacionalidad
		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Nacionalidad:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['identificacion']['provinciaNacimiento']['provincia'] . ' - ' .$this->datos_personales['identificacion']['paisNacionalidad']['pais'], $this->borde, 1, 'L', false);

		//Sexo
		$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Sexo:', $this->borde, 0, 'L', false);
		$this->Cell($this->getAnchoData(), $this->alto_linea, ucwords(strtolower($this->datos_personales['identificacion']['sexo'])), $this->borde, 1, 'L', false);
	}

	protected function datos_domicilio()
	{
		if (isset($this->datos_personales['direccionResidencial'])) {
			//DirecciÃ³n
			$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Domicilio residencial:', $this->borde, 0, 'L', false);
			$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['direccionResidencial']['calle'] . ' ' . $this->datos_personales['direccionResidencial']['numero'] . ' - (' . $this->datos_personales['direccionResidencial']['codigoPostal'] . ') ' . $this->datos_personales['direccionResidencial']['localidad']['localidad'], $this->borde, 1, 'L', false);
		}
		if (isset($this->datos_personales['direccionResidencial']['celular'])) {
			//Celular
			$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Celular (personal):', $this->borde, 0, 'L', false);
			$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['direccionResidencial']['celular'], $this->borde, 1, 'L', false);
		}
		if (isset($this->datos_personales['direccionResidencial']['email'])) {
			//Email
			$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'E-Mail (personal):', $this->borde, 0, 'L', false);
			$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['direccionResidencial']['email'], $this->borde, 1, 'L', false);
		}
		if (isset($this->datos_personales['direccionLaboral'])) {
			//DirecciÃ³n
			$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Domicilio laboral:', $this->borde, 0, 'L', false);
			$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['direccionLaboral']['calle'] . ' ' . $this->datos_personales['direccionLaboral']['numero'] . ' - (' . $this->datos_personales['direccionLaboral']['codigoPostal'] . ') ' . $this->datos_personales['direccionLaboral']['localidad']['localidad'], $this->borde, 1, 'L', false);
		}
		if (isset($this->datos_personales['direccionLaboral']['celular'])) {
			//Celular
			$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Celular (laboral):', $this->borde, 0, 'L', false);
			$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['direccionLaboral']['celular'], $this->borde, 1, 'L', false);
		}
		if (isset($this->datos_personales['direccionLaboral']['email'])) {
			//Email
			$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'E-Mail (laboral):', $this->borde, 0, 'L', false);
			$this->Cell($this->getAnchoData(), $this->alto_linea, $this->datos_personales['direccionLaboral']['email'], $this->borde, 1, 'L', false);
		}
	}

	protected function datos_experticia()
	{
		$this->titulo_seccion('Experticia');
		
		//Resumen
		$this->subtitulo_seccion('Resumen:');
		$this->MultiCell($this->ancho_hoja, $this->alto_linea, $this->datos_experticia['resumen'], $this->borde, 'J', false);
		
		//Si no hay áreas de actuación, se finaliza
		if(!isset($this->datos_experticia['areasDeActuacion']['areaDeActuacion']) || !is_array($this->datos_experticia['areasDeActuacion']['areaDeActuacion'])) {
			return;
		}

		$this->Ln();

		//Áreas de Actuación
		$this->subtitulo_seccion('Áreas de Actuación:');

		$ancho_etiqueta_anterior = $this->ancho_etiqueta;
		$this->ancho_etiqueta    = 35;
		
		$this->setFont($this->fuente_familia, '', ($this->fuente_tamanio-2));
		// Esta validación se debe a que CVAr no devuelve los datos de manera uniforme.
		// Si existe una sola area de experticia, la devuelve directamente (como unico elemento), pero
		// si existe mas de una, llega un array (entonces esto hace homogeneo el resultado: lo pasa a array si es un solo elemento)
		$indices = array_keys($this->datos_experticia['areasDeActuacion']['areaDeActuacion']);
		if (is_numeric($indices[0])) {
			$areasDeActuacion = $this->datos_experticia['areasDeActuacion']['areaDeActuacion'];
		} else {
			$areasDeActuacion = [$this->datos_experticia['areasDeActuacion']['areaDeActuacion']];
		}
		
		foreach ($areasDeActuacion as $area) {
			//Área y Línea de Investigación
			$this->setX($this->getX() + 4);
			$this->MultiCell($this->ancho_hoja-4, $this->alto_linea, '- '.$area['area'] . ': ' . $area['lineaInvestigacion'], $this->borde, 'J', false);
		}

		//Vuelvo al estado anterior
		$this->setFont($this->fuente_familia, '', $this->fuente_tamanio);
		$this->ancho_etiqueta = $ancho_etiqueta_anterior;
	}

	protected function datos_formacion()
	{
		$this->titulo_seccion('Formación');
		$formacion = $this->formacion['formacionAcademica'];
		
		$ancho_etiqueta_anterior = $this->ancho_etiqueta;
		$this->ancho_etiqueta    = 35;

		//Terciaria
		if (isset($formacion['terciariaNoUniversitaria']) && $formacion['terciariaNoUniversitaria']) {
			$this->Cell($this->ancho_etiqueta,  $this->alto_linea, 'Terciaria:', $this->borde, 1, 'L', false);
			$this->Cell($this->getAnchoData(),  $this->alto_linea, $formacion['terciariaNoUniversitaria'], $this->borde, 1, 'L', false);	
		}

		//Grado
		
		if (isset($formacion['universitariaGrado']) && $formacion['universitariaGrado']) {
			// Esta validación se debe a que CVAr no devuelve los datos de manera uniforme.
			// Si existe una sola carrera universitaria, la devuelve directamente (como unico elemento), pero
			// si existe mas de una, llega un array (entonces esto hace homogeneo el resultado: lo pasa a array si es un solo elemento)
			$indices = array_keys($formacion['universitariaGrado']['universitariaGrado']);
			if (is_numeric($indices[0])) {
				$universitariaGrado = $formacion['universitariaGrado']['universitariaGrado'];
			} else {
				$universitariaGrado = [$formacion['universitariaGrado']['universitariaGrado']];
			}

			foreach ($universitariaGrado as $grado) {
				//Título
				$this->setX($this->getX()+4);
				$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Título:', $this->borde, 0, 'L', false);
				$this->Cell($this->getAnchoData()-4,  $this->alto_linea, $grado['titulo'] . ' (' . $grado['situacionDeNivel'] . ')', $this->borde, 1, 'L', false);
				
				//Fecha de Egreso
				$this->setX($this->getX()+4);
				$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Fecha egreso:', $this->borde, 0, 'L', false);
				$this->Cell($this->getAnchoData()-4,  $this->alto_linea, $this->getFecha($grado['fechaEgreso'],'d/m/Y'), $this->borde, 1, 'L', false);

				//Institución otorgante
				$this->setX($this->getX()+4);
				$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Inst. Otorgante:', $this->borde, 0, 'L', false);
				$this->Cell($this->getAnchoData()-4,  $this->alto_linea, end(explode(';',$grado['institucionesOtorgantes']['institucion']['rutaCompleta'])), $this->borde, 1, 'L', false);

				//Tesina
				if (isset($grado['tesina']['titulo']) && $grado['tesina']['titulo']) {
					$this->setX($this->getX()+4);
					$this->Cell($this->ancho_etiqueta, $this->alto_linea, 'Tesina:', $this->borde, 1, 'L', false);
					$this->setX($this->getX()+4);
					$this->MultiCell($this->ancho_hoja-4,  $this->alto_linea, $grado['tesina']['titulo'], $this->borde, 'L', false);
				}
				$this->Ln();
			}
			
		}

		//Vuelvo al estado anterior
		$this->setFont($this->fuente_familia, '', $this->fuente_tamanio);
		$this->ancho_etiqueta = $ancho_etiqueta_anterior;
		
	}

	private function getFecha($fechaCVAR, $format)
	{
		if (!$fechaCVAR) {
			return '';
		}
		$fecha = new DateTime($fechaCVAR);
		return $fecha->format($format);
	}

	protected function titulo_seccion($titulo)
	{
		$this->Ln();
		$this->setFont('Times', 'BU', ($this->fuente_tamanio + 2));
		$this->Cell($this->ancho_hoja, $this->alto_linea, $titulo, $this->borde, 1, 'L', false);
		$this->setFont($this->fuente_familia, '', $this->fuente_tamanio);
		$this->Ln();
	}

	protected function subtitulo_seccion($subtitulo)
	{
		$this->setFont($this->fuente_familia, 'U', $fuente_tamanio);
		$this->Cell($this->ancho_etiqueta,  $this->alto_linea, $subtitulo, $this->borde, 1, 'L', false);
		$this->setFont($this->fuente_familia, '', $fuente_tamanio);
	}

	/**
	 * Retorna el ancho que queda en la hoja despues de imprimir la etiqueta
	 * @return int
	 */
	private function getAnchoData()
	{
		return $this->ancho_hoja - $this->ancho_etiqueta - $this->sangria;
	}

	function mostrar()
	{
		$this->Output('I',$this->nombre_archivo.'.pdf');
	}
}
?>